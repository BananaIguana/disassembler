use std::fmt::Formatter;

#[allow(non_camel_case_types)]
#[allow(clippy::upper_case_acronyms)]
pub enum Register
{
    // 64-bit
    x0,
    x1,
    x2,
    x3,
    x4,
    x5,
    x6,
    x7,
    x8,
    x9,
    x10,
    x11,
    x12,
    x13,
    x14,
    x15,
    x16,
    x17,
    x18,
    x19,
    x20,
    x21,
    x22,
    x23,
    x24,
    x25,
    x26,
    x27,
    x28,
    x29,
    x30,
    SP,

    // 32-bit
    w0,
    w1,
    w2,
    w3,
    w4,
    w5,
    w6,
    w7,
    w8,
    w9,
    w10,
    w11,
    w12,
    w13,
    w14,
    w15,
    w16,
    w17,
    w18,
    w19,
    w20,
    w21,
    w22,
    w23,
    w24,
    w25,
    w26,
    w27,
    w28,
    w29,
    w30,
    WZR,
}

impl From<u64> for Register
{
    fn from(value: u64) -> Self
    {
        match value
        {
            0 => Register::x0,
            1 => Register::x1,
            2 => Register::x2,
            3 => Register::x3,
            4 => Register::x4,
            5 => Register::x5,
            6 => Register::x6,
            7 => Register::x7,
            8 => Register::x8,
            9 => Register::x9,
            10 => Register::x10,
            11 => Register::x11,
            12 => Register::x12,
            13 => Register::x13,
            14 => Register::x14,
            15 => Register::x15,
            16 => Register::x16,
            17 => Register::x17,
            18 => Register::x18,
            19 => Register::x19,
            20 => Register::x20,
            21 => Register::x21,
            22 => Register::x22,
            23 => Register::x23,
            24 => Register::x24,
            25 => Register::x25,
            26 => Register::x26,
            27 => Register::x27,
            28 => Register::x28,
            29 => Register::x29,
            30 => Register::x30,
            31 => Register::SP,
            _ => panic!("Unhandled"),
        }
    }
}

impl From<u32> for Register
{
    fn from(value: u32) -> Self
    {
        match value
        {
            0 => Register::w0,
            1 => Register::w1,
            2 => Register::w2,
            3 => Register::w3,
            4 => Register::w4,
            5 => Register::w5,
            6 => Register::w6,
            7 => Register::w7,
            8 => Register::w8,
            9 => Register::w9,
            10 => Register::w10,
            11 => Register::w11,
            12 => Register::w12,
            13 => Register::w13,
            14 => Register::w14,
            15 => Register::w15,
            16 => Register::w16,
            17 => Register::w17,
            18 => Register::w18,
            19 => Register::w19,
            20 => Register::w20,
            21 => Register::w21,
            22 => Register::w22,
            23 => Register::w23,
            24 => Register::w24,
            25 => Register::w25,
            26 => Register::w26,
            27 => Register::w27,
            28 => Register::w28,
            29 => Register::w29,
            30 => Register::w30,
            31 => Register::WZR,
            _ => panic!("Unhandled"),
        }
    }
}

impl std::fmt::Display for Register
{
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result
    {
        let str = match self
        {
            // 64-bit
            Register::x0 => "x0",
            Register::x1 => "x1",
            Register::x2 => "x2",
            Register::x3 => "x3",
            Register::x4 => "x4",
            Register::x5 => "x5",
            Register::x6 => "x6",
            Register::x7 => "x7",
            Register::x8 => "x8",
            Register::x9 => "x9",
            Register::x10 => "x10",
            Register::x11 => "x11",
            Register::x12 => "x12",
            Register::x13 => "x13",
            Register::x14 => "x14",
            Register::x15 => "x15",
            Register::x16 => "x16",
            Register::x17 => "x17",
            Register::x18 => "x18",
            Register::x19 => "x19",
            Register::x20 => "x20",
            Register::x21 => "x21",
            Register::x22 => "x22",
            Register::x23 => "x23",
            Register::x24 => "x24",
            Register::x25 => "x25",
            Register::x26 => "x26",
            Register::x27 => "x27",
            Register::x28 => "x28",
            Register::x29 => "x29",
            Register::x30 => "x30",
            Register::SP => "sp",

            // 32-bit
            Register::w0 => "w0",
            Register::w1 => "w1",
            Register::w2 => "w2",
            Register::w3 => "w3",
            Register::w4 => "w4",
            Register::w5 => "w5",
            Register::w6 => "w6",
            Register::w7 => "w7",
            Register::w8 => "w8",
            Register::w9 => "w9",
            Register::w10 => "w10",
            Register::w11 => "w11",
            Register::w12 => "w12",
            Register::w13 => "w13",
            Register::w14 => "w14",
            Register::w15 => "w15",
            Register::w16 => "w16",
            Register::w17 => "w17",
            Register::w18 => "w18",
            Register::w19 => "w19",
            Register::w20 => "w20",
            Register::w21 => "w21",
            Register::w22 => "w22",
            Register::w23 => "w23",
            Register::w24 => "w24",
            Register::w25 => "w25",
            Register::w26 => "w26",
            Register::w27 => "w27",
            Register::w28 => "w28",
            Register::w29 => "w29",
            Register::w30 => "w30",
            Register::WZR => "wzr",
        };

        write!(f, "{}", str)
    }
}
